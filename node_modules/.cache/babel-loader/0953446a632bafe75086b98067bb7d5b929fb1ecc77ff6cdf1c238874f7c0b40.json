{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Din\\\\Desktop\\\\web\\\\React\\\\memegenerator\\\\src\\\\Main.js\",\n  _s = $RefreshSig$();\nimport memesData from './memesData';\nimport './css/Main.css';\nimport React from 'react';\n//https://api.imgflip.com/get_memes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main(prop) {\n  _s();\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = React.useState();\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemeImages(data.data.memes));\n  }, []);\n  console.log(allMemeImages);\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMemeImages.length);\n    const url = allMemeImages[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  function handle(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prev => {\n      return {\n        ...prev,\n        [name]: value\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form--input\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"l7O7mUmt0lRDPc4k4o7gxgCHH9U=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["memesData","React","Main","prop","meme","setMeme","useState","topText","bottomText","randomImage","allMemeImages","setAllMemeImages","useEffect","fetch","then","res","json","data","memes","console","log","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme","handle","event","name","value","target","prev"],"sources":["C:/Users/Din/Desktop/web/React/memegenerator/src/Main.js"],"sourcesContent":["import memesData from './memesData';\r\nimport './css/Main.css';\r\nimport React from 'react';\r\n//https://api.imgflip.com/get_memes\r\nfunction Main(prop) {\r\n  const [meme, setMeme] = React.useState({\r\n    topText: \"\",\r\n    bottomText: \"\",\r\n    randomImage: \"http://i.imgflip.com/1bij.jpg\" \r\n})\r\nconst [allMemeImages, setAllMemeImages] = React.useState()\r\n\r\n\r\nReact.useEffect(() => {\r\n  fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(res => res.json())\r\n      .then(data => setAllMemeImages(data.data.memes))\r\n      \r\n}, [])\r\n\r\nconsole.log(allMemeImages)\r\n\r\nfunction getMemeImage() {\r\n    \r\n    \r\n    const randomNumber = Math.floor(Math.random() * allMemeImages.length)\r\n    const url = allMemeImages[randomNumber].url\r\n    setMeme(prevMeme => ({\r\n        ...prevMeme,\r\n        randomImage: url\r\n    }))\r\n   \r\n   }\r\n\r\n   \r\n  function handle(event) {\r\n    const {name, value} = event.target\r\n    setMeme(prev => {\r\n      return {\r\n        ...prev,\r\n        [name]: value\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <main>\r\n    <div className=\"form\">\r\n        <input \r\n            type=\"text\"\r\n            placeholder=\"Top text\"\r\n            className=\"form--input\"\r\n            name=\"topText\"\r\n            value={meme.topText}\r\n            onChange={handle}\r\n        />\r\n        <input \r\n            type=\"text\"\r\n            placeholder=\"Bottom text\"\r\n            className=\"form--input\"\r\n            name=\"bottomText\"\r\n            value={meme.bottomText}\r\n            onChange={handle}\r\n        />\r\n        <button \r\n            className=\"form--button\"\r\n            onClick={getMemeImage}\r\n        >\r\n            Get a new meme image ðŸ–¼\r\n        </button>\r\n    </div>\r\n    <div className=\"meme\">\r\n        <img src={meme.randomImage} className=\"meme--image\" />\r\n        <h2 className=\"meme--text top\">{meme.topText}</h2>\r\n        <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\r\n    </div>\r\n</main>\r\n  );\r\n}\r\n\r\nexport default Main;"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,aAAa;AACnC,OAAO,gBAAgB;AACvB,OAAOC,KAAK,MAAM,OAAO;AACzB;AAAA;AACA,SAASC,IAAI,CAACC,IAAI,EAAE;EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,KAAK,CAACK,QAAQ,CAAC;IACrCC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,KAAK,CAACK,QAAQ,EAAE;EAG1DL,KAAK,CAACW,SAAS,CAAC,MAAM;IACpBC,KAAK,CAAC,mCAAmC,CAAC,CACrCC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIN,gBAAgB,CAACM,IAAI,CAACA,IAAI,CAACC,KAAK,CAAC,CAAC;EAEtD,CAAC,EAAE,EAAE,CAAC;EAENC,OAAO,CAACC,GAAG,CAACV,aAAa,CAAC;EAE1B,SAASW,YAAY,GAAG;IAGpB,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGf,aAAa,CAACgB,MAAM,CAAC;IACrE,MAAMC,GAAG,GAAGjB,aAAa,CAACY,YAAY,CAAC,CAACK,GAAG;IAC3CtB,OAAO,CAACuB,QAAQ,KAAK;MACjB,GAAGA,QAAQ;MACXnB,WAAW,EAAEkB;IACjB,CAAC,CAAC,CAAC;EAEJ;EAGD,SAASE,MAAM,CAACC,KAAK,EAAE;IACrB,MAAM;MAACC,IAAI;MAAEC;IAAK,CAAC,GAAGF,KAAK,CAACG,MAAM;IAClC5B,OAAO,CAAC6B,IAAI,IAAI;MACd,OAAO;QACL,GAAGA,IAAI;QACP,CAACH,IAAI,GAAGC;MACV,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,oBACE;IAAA,wBACA;MAAK,SAAS,EAAC,MAAM;MAAA,wBACjB;QACI,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,UAAU;QACtB,SAAS,EAAC,aAAa;QACvB,IAAI,EAAC,SAAS;QACd,KAAK,EAAE5B,IAAI,CAACG,OAAQ;QACpB,QAAQ,EAAEsB;MAAO;QAAA;QAAA;QAAA;MAAA,QACnB,eACF;QACI,IAAI,EAAC,MAAM;QACX,WAAW,EAAC,aAAa;QACzB,SAAS,EAAC,aAAa;QACvB,IAAI,EAAC,YAAY;QACjB,KAAK,EAAEzB,IAAI,CAACI,UAAW;QACvB,QAAQ,EAAEqB;MAAO;QAAA;QAAA;QAAA;MAAA,QACnB,eACF;QACI,SAAS,EAAC,cAAc;QACxB,OAAO,EAAER,YAAa;QAAA,UACzB;MAED;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACP,eACN;MAAK,SAAS,EAAC,MAAM;MAAA,wBACjB;QAAK,GAAG,EAAEjB,IAAI,CAACK,WAAY;QAAC,SAAS,EAAC;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,eACtD;QAAI,SAAS,EAAC,gBAAgB;QAAA,UAAEL,IAAI,CAACG;MAAO;QAAA;QAAA;QAAA;MAAA,QAAM,eAClD;QAAI,SAAS,EAAC,mBAAmB;QAAA,UAAEH,IAAI,CAACI;MAAU;QAAA;QAAA;QAAA;MAAA,QAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QACtD;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEP;AAAC,GA1EQN,IAAI;AAAA,KAAJA,IAAI;AA4Eb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}